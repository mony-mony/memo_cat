package com.main_memo.memo_cat_project

import android.Manifest
import android.app.AlarmManager
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.media.AudioManager
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.view.WindowManager
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel

class MainActivity : FlutterActivity() {

    companion object {
        const val CHANNEL_ID_SILENT = "memo_cat_silent_v2"
        const val METHOD_WAKE = "memo.cat/wake"
        const val METHOD_EXACT = "memo.cat/exact_alarm"
        const val REQ_NOTI = 9001
        const val METHOD_TIMEZONE = "memo.cat/timezone"

        // ‚úÖ ÏÉà Ï±ÑÎÑê: Î©îÎ™®Î≥Ñ ÏòàÏïΩ ÏïåÎ¶º
        const val METHOD_REMIND = "memo.cat/remind"
    }

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)

        // (Í∏∞Ï°¥) Î¨¥Ïùå Ìä∏Î†àÏù¥ ÌëúÏãú Ï±ÑÎÑê Ïú†ÏßÄ
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, METHOD_WAKE)
            .setMethodCallHandler { call, result ->
                when (call.method) {
                    "wakeNow" -> {
                        val title = call.argument<String>("title") ?: "Î©îÎ™®ÎÉ•Ïù¥"
                        val body = call.argument<String>("body") ?: "Ïó¥Ïñ¥Î≥ºÎûòÏöî?"
                        showSilentNotification(title, body)
                        result.success(null)
                    }
                    else -> result.notImplemented()
                }
            }

        // (Í∏∞Ï°¥) Ï†ïÌôï ÏïåÎûå Í∂åÌïú Ï≤¥ÌÅ¨/ÏöîÏ≤≠ Ïú†ÏßÄ
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, METHOD_EXACT)
            .setMethodCallHandler { call, result ->
                when (call.method) {
                    "canScheduleExactAlarms" -> {
                        val am = getSystemService(Context.ALARM_SERVICE) as AlarmManager
                        val ok = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                            am.canScheduleExactAlarms()
                        } else true
                        result.success(ok)
                    }
                    "openExactAlarmSettings" -> {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                            val intent = Intent(Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM)
                            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
                            startActivity(intent)
                        }
                        result.success(true)
                    }
                    else -> result.notImplemented()
                }
            }

        // ‚úÖ Ïã†Í∑ú: Îã®Ïùº ÏãúÍ∞Å ÏòàÏïΩ/Ï∑®ÏÜå
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, METHOD_REMIND)
            .setMethodCallHandler { call, result ->
                when (call.method) {
                    // args: { noteId: "...", body: "...", whenEpochMs: <ms> , title?: "..." }
                    "scheduleAt" -> {
                        val noteId = call.argument<String>("noteId") ?: return@setMethodCallHandler result.error("ARG", "noteId required", null)
                        val body   = call.argument<String>("body") ?: ""
                        val whenTs = call.argument<Long>("whenEpochMs") ?: return@setMethodCallHandler result.error("ARG", "whenEpochMs required", null)
                        val title  = call.argument<String>("title") ?: "ÏòàÏïΩ ÏïåÎ¶º"

                        val i = Intent(applicationContext, ScreenWatchService::class.java).apply {
                            action = ScreenWatchService.ACTION_SCHEDULE_ONE
                            putExtra(ScreenWatchService.EXTRA_NOTE_ID, noteId)
                            putExtra(ScreenWatchService.EXTRA_TITLE, title)
                            putExtra(ScreenWatchService.EXTRA_BODY, body)
                            putExtra("whenTs", whenTs)
                        }
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) startForegroundService(i) else startService(i)
                        result.success(true)
                    }
                    // args: { noteId: "..." }  (Í∏∞Ï°¥ Ìò∏Ìôò Ï∑®ÏÜå)
                    "cancelAllForNote" -> {
                        val noteId = call.argument<String>("noteId") ?: return@setMethodCallHandler result.error("ARG", "noteId required", null)
                        val i = Intent(applicationContext, ScreenWatchService::class.java).apply {
                            action = ScreenWatchService.ACTION_CANCEL_THREE
                            putExtra(ScreenWatchService.EXTRA_NOTE_ID, noteId)
                        }
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) startForegroundService(i) else startService(i)
                        result.success(true)
                    }
                    else -> result.notImplemented()
                }
            }
    }

    private fun createSilentChannelIfNeeded() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val nm = getSystemService(NotificationManager::class.java)
            // IMPORTANCE_LOW: Ìó§ÎìúÏóÖ/ÏÜåÎ¶¨/ÏßÑÎèô ÏóÜÏùå (Ìä∏Î†àÏù¥ÏóêÎßå Ï°∞Ïö©Ìûà)
            val ch = NotificationChannel(
                CHANNEL_ID_SILENT,
                "Î©îÎ™®ÎÉ• Î¨¥Ïùå ÏïåÎ¶º",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "Î¨¥Ïùå + ÏïåÎ¶ºÏ∞ΩÏóêÎßå ÌëúÏãú"
                setSound(null, null)           // üîá ÏÜåÎ¶¨ ÏóÜÏùå
                enableVibration(false)         // üîï ÏßÑÎèô ÏóÜÏùå
                setShowBadge(false)
                lockscreenVisibility = Notification.VISIBILITY_PRIVATE
            }
            nm.createNotificationChannel(ch)
        }
    }

    private fun maybeRequestPostNotification() {
        if (Build.VERSION.SDK_INT >= 33 &&
            ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS)
            != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this, arrayOf(Manifest.permission.POST_NOTIFICATIONS), REQ_NOTI
            )
        }
    }

    private fun startScreenWatchService() {
        val i = Intent(applicationContext, ScreenWatchService::class.java)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) startForegroundService(i)
        else startService(i)
    }

    // ‚úÖ ‚ÄúÎ¨¥Ïùå + Ìä∏Î†àÏù¥ Ï†ÑÏö©‚Äù ÏïåÎ¶º ÎπåÎçî (Í∏∞Ï°¥ Í∏∞Îä• Ïú†ÏßÄ)
    private fun showSilentNotification(title: String, body: String) {
        val launchIntent = Intent(this, MainActivity::class.java).apply {
            addFlags(
                Intent.FLAG_ACTIVITY_NEW_TASK or
                        Intent.FLAG_ACTIVITY_SINGLE_TOP or
                        Intent.FLAG_ACTIVITY_CLEAR_TOP
            )
        }

        val pi = PendingIntent.getActivity(
            this, 0, launchIntent,
            if (Build.VERSION.SDK_INT >= 31)
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            else PendingIntent.FLAG_UPDATE_CURRENT
        )

        val builder = NotificationCompat.Builder(this, CHANNEL_ID_SILENT)
            .setSmallIcon(resources.getIdentifier("ic_launcher", "mipmap", packageName))
            .setContentTitle(title)
            .setContentText(body)
            .setAutoCancel(true)
            .setContentIntent(pi)
            .setOngoing(false)
//            .setSilent(true) // ‚úÖ Í∞ïÏ†ú Î¨¥Ïùå
            .setPriority(NotificationCompat.PRIORITY_LOW) // (O ÎØ∏ÎßåÏö© Î∞±ÏóÖ)

        val nm = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        nm.notify(10001, builder.build())
    }


}
